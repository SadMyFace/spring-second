package com.myweb.www.handler;

import java.io.File;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import com.myweb.www.domain.FileVO;
import com.myweb.www.repository.FileDAO;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
@Component
@EnableScheduling
public class FileSweeper {
	
	private final String BASE_PATH = "D:\\_myProject\\_java\\_fileUpload\\";
	
	private final FileDAO fdao;
	
	//초 분 시 일 월 요일 년도(년도는 생략 가능)
	//크론 표현식 사용
	@Scheduled(cron="0 55 10 * * *")
	public void fileSeeper() {
		log.info(">>> FileSweeper Running start~!! : {}", LocalDateTime.now());
		
		//DB에 등록된 파일 목록 가져오기
		List<FileVO> dbList = fdao.selectListAllFile();
		
		//저장소를 검색할 때 필요한 파일의 경로 리스트(실제 존재해야 될 리스트)
		List<String> currFiles = new ArrayList<String>();
		
		for(FileVO fvo : dbList) {
			String filePath = fvo.getSaveDir() + File.separator + fvo.getUuid();
			String fileName = fvo.getFileName();
			currFiles.add(BASE_PATH + filePath + "_" + fileName);
			
			//이미지라면 썸네일 경로도 추가
			if(fvo.getFileType() > 0) {
				currFiles.add(BASE_PATH + filePath + "_th_" + fileName);
			}
		}
		
		log.info("currFile >>> " + currFiles);
		
		//오늘 날짜를 반영한 폴더 구조 경로 만들기
		LocalDate now = LocalDate.now();
		String today = now.toString(); // 2024-01-12
		today = today.replace("-", File.separator);
		
		//경로를 기반으로 저장되어있는 파일을 검색
		//(오늘 날짜 폴더 안에 있는 전체 파일)
		//-- Paths.get(BASE_PATH + today): Paths 클래스는 java.nio.file 패키지에 속한 클래스로, 
		//경로를 생성하는 데 사용됨. Paths.get(...) 메서드는 문자열로 된 경로를 나타내는 인수를 받아들여 Path 객체를 반환함 
		//여기서는 BASE_PATH + today를 합친 경로를 나타내는 Path 객체가 생성
		//-- .toFile(): Path 객체를 File 객체로 변환함. 
		//toFile() 메서드를 호출하면 해당 경로를 가진 파일 또는 디렉토리를 나타내는 File 객체가 생성
		File dir = Paths.get(BASE_PATH + today).toFile();
		//listFiles(): File 클래스의 메서드 중 하나로, 디렉토리에 포함된 파일 및 디렉토리의 목록을 File 객체 배열로 반환
		File[] allFileObjects = dir.listFiles();
		
		//실제 저장되어 있는 파일과 DB에 존재하는 파일을 비교하여 없는 파일은 삭제
		for(File file : allFileObjects) {
			//-- toPath(): File 객체를 Path 객체로 변환하는 메서드임. toPath() 메서드를 호출하면 해당 파일의 경로를 나타내는 Path 객체가 반환됨.
			//-- toString(): Path 객체를 문자열로 변환하는 메서드임. Path 객체의 toString() 메서드를 호출하면 해당 경로를 문자열로 표현한 문자열이 반환됨.
			String storedFileName = file.toPath().toString();
			if(!currFiles.contains(storedFileName)) {
				file.delete(); // 파일 삭제
				log.info(">>> delete file >>> {} ", storedFileName);
			}
		}		
		
		log.info(">>> FileSweeper Running finish~!! : {}", LocalDateTime.now());
	}
}
